using System;


namespace Lab_16
{

    abstract class Shape
    {
        private string name
        {
            get; set;
        }

        protected abstract double Area { get; }

        protected Shape(string name)
        {
            this.name = name;
        }

        public override string ToString()
        {
            return $"{name} - {Area:F2}";
        }

    }

    class Square : Shape
    {
        protected double Length { get; }
        protected override double Area { get { return Length * Length; } }

        public Square(string name, double length) : base (name)
        {
            this.Length = length;
        }
    }

    class Circle : Square
    {
        protected override double Area { get { return Math.PI * this.Length * this.Length; } }

        public Circle(string name, double length) : base(name, length)
        {
        }
    }

    class Rectangle : Shape
    {
        protected double Width { get; }
        protected double Length { get; }
        protected override double Area { get { return Width * Length; } }

        public Rectangle(string name, double length, double width) : base(name)
        {
            this.Length = length;
            this.Width = width;
        }
    }

    class Ellipse : Rectangle
    {
        protected override double Area { get { return Math.PI * this.Length * this.Width; } }

        public Ellipse (string name , double length, double width) : base(name, length, width)
        {
        }
    }

    class Triangle: Rectangle
    {
        protected override double Area { get { return 0.5 * this.Width * this.Length; } }

        public Triangle(string name, double length, double width) : base(name, length, width)
        {
        }
    }

    class Diamond : Rectangle
    {
        protected override double Area { get { return this.Width * this.Length; } }
        public Diamond(string name, double length, double width) : base(name, length, width)
        {
        }
    }



        internal class Program
    {
        static void Main(string[] args)
        {
            //although Shape is an abstract is can be used as a reference type
            //any child class of Shape is also a Shape
            double length = 2;
            double width = 3;
            List<Shape> shapes = new List<Shape>
                {
                new Square($"square – len:{length}", length),
                new Circle($"circle – rad: {length}", length),
                new Rectangle($"rectangle – wid:{length}, len:{width}", length, width),
                new Triangle($"triangle – bas:{length}, hei:{width}", length, width),
                //doubling width and length
                new Triangle($"triangle – bas:{length *= 2}, hei:{width *= 2}", length, width),
                new Square($"square – len:{length}", length),
                new Circle($"circle – rad: {length}", length),
                new Rectangle($"rectangle – wid:{length}, len:{width}", length, width),
                new Ellipse($"ellipse – min:{length}, maj:{width}", length, width),
                new Diamond($"diamond – min:{length}, maj:{width}", length, width)
                };
            foreach (Shape shape in shapes)
                Console.WriteLine(shape);
        }
    }
}
